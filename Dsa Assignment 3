#include <stdio.h>
#include <stdlib.h>
void multiplyMatrices(int **a, int **b, int
**result, int rowA, int colA, int colB) {
for (int i = 0; i < rowA; i++) {
for (int j = 0; j < colB; j++) {
result[i][j] = 0; // Initialize result
for (int k = 0; k < colA; k++) {
result[i][j] += a[i][k] * b[k][j];
}
}
}
}
int main() {
int rowA, colA, rowB, colB;
printf("Enter rows and columns for first matrix:
");
scanf("%d %d", &rowA, &colA);
printf("Enter rows and columns for second
matrix: ");
scanf("%d %d", &rowB, &colB);
if (colA != rowB) {
printf("Matrix multiplication is not
possible.\n");
return 1;
}
// Allocate memory for matrices
int **a = (int **)malloc(rowA * sizeof(int *));
int **b = (int **)malloc(rowB * sizeof(int *));
int **result = (int **)malloc(rowA * sizeof(int
*));
for (int i = 0; i < rowA; i++) a[i] = (int
*)malloc(colA * sizeof(int));
for (int i = 0; i < rowB; i++) b[i] = (int
*)malloc(colB * sizeof(int));
for (int i = 0; i < rowA; i++) result[i] = (int
*)malloc(colB * sizeof(int));
// Input matrices
printf("Enter elements of first matrix:\n");
for (int i = 0; i < rowA; i++)
for (int j = 0; j < colA; j++)
scanf("%d", &a[i][j]);
printf("Enter elements of second matrix:\n");
for (int i = 0; i < rowB; i++)
for (int j = 0; j < colB; j++)
scanf("%d", &b[i][j]);
// Perform multiplication
multiplyMatrices(a, b, result, rowA, colA,
colB);
// Display result
printf("Resultant matrix:\n");
for (int i = 0; i < rowA; i++) {
for (int j = 0; j < colB; j++) {
printf("%d ", result[i][j]);
}
printf("\n");
}
// Free memory
for (int i = 0; i < rowA; i++) free(a[i]);
for (int i = 0; i < rowB; i++) free(b[i]);
for (int i = 0; i < rowA; i++) free(result[i]);
free(a);
free(b);
free(result);
return 0;
}


##### 2 nd question code#######

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX_STUDENTS 100
#define NAME_LENGTH 50
void displayStudents(char students[][NAME_LENGTH], int
count) {
if (count == 0) {
printf("No students in the list.\n");
return
}
printf("Current list of students:\n");
for (int i = 0; i < count; i++) {
printf("%d: %s\n", i + 1, students[i]);
}
}
int main() {
char students[MAX_STUDENTS][NAME_LENGTH];
int count = 0, choice;
do {
printf("\n1. Create list of students\n");
printf("2. Insert a new student\n");
printf("3. Delete a student\n");
printf("4. Traverse the list\n");
printf("5. Search for a student\n");
printf("0. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
getchar(); // Consume newline
switch (choice) {
case 1: // Create list
printf("Enter number of students (max %d): ",
MAX_STUDENTS);
scanf("%d", &count);
getchar();
if (count > MAX_STUDENTS) count = MAX_STUDENTS;
for (int i = 0; i < count; i++) {
printf("Enter name of student %d: ", i + 1);
fgets(students[i], NAME_LENGTH, stdin);
students[i][strcspn(students[i], "\n")] = 0; // Remove
newline
}
displayStudents(students, count);
break;
case 2: // Insert a new student
if (count >= MAX_STUDENTS) {
printf("Maximum limit reached!\n");
break;
}
printf("Enter name of new student: ");
fgets(students[count], NAME_LENGTH, stdin);
students[count][strcspn(students[count], "\n")] = 0; //
Remove newline
count++;
displayStudents(students, count);
break;
case 3: // Delete a student
if (count == 0) {
printf("No students to delete.\n");
break;
}
printf("Enter index to delete (1 to %d): ", count);
int position;
scanf("%d", &position);
getchar();
if (position < 1 || position > count) {
printf("Invalid index!\n");
} else {
for (int i = position - 1; i < count - 1; i++) {
strcpy(students[i], students[i + 1]);
}
count--;
printf("Student at index %d deleted.\n", position);
}
displayStudents(students, count);
break;
case 4: // Traverse the list
displayStudents(students, count);
break;
case 5: // Search for a student
if (count == 0) {
printf("No students to search.\n");
break;
}
char searchName[NAME_LENGTH];
printf("Enter name to search: ");
fgets(searchName, NAME_LENGTH, stdin);
searchName[strcspn(searchName, "\n")] = 0; //
Remove newline
int found = 0;
for (int i = 0; i < count; i++) {
if (strcmp(students[i], searchName) == 0) {
printf("Student '%s' found at position %d.\n",
searchName, i + 1);
found = 1;
break;
}
}
if (!found) {
printf("Student not found.\n");
}
break;
case 0: // Exit
printf("Exiting the program.\n");
break;
default:
printf("Invalid choice! Please try again.\n");
break;
}
} while (choice != 0);
return 0;
}
